approch one 

deploy:
  runs-on: ubuntu-latest
  needs: build

  steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Setup SSH Key
    run: |
      echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
      chmod 600 ec2_key.pem

  - name: Deploy to EC2
    run: |
      IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}
      ssh -o StrictHostKeyChecking=no -i "ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
        # Pull the latest Docker image
        docker pull $IMAGE_URI:latest

        # Stop and remove any existing container
        docker stop new_app_container || true
        docker rm new_app_container || true

        # Run the Docker container with the .env file
        docker run --env-file /path/to/your/.env -d -p 8001:8001 --name new_app_container $IMAGE_URI:latest
      EOF
    env:
      REPO_NAME: ${{ env.REPO_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}


approch 2 

deploy:
  runs-on: ubuntu-latest
  needs: build

  steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Setup SSH Key
    run: |
      echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
      chmod 600 ec2_key.pem

  - name: Deploy to EC2
    run: |
      IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}
      ssh -o StrictHostKeyChecking=no -i "ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
        # Create .env file on EC2 instance
        echo "${{ secrets.ENV_FILE }}" > .env

        # Pull the latest Docker image
        docker pull $IMAGE_URI:latest

        # Stop and remove any existing container
        docker stop new_app_container || true
        docker rm new_app_container || true

        # Run the Docker container with the .env file
        docker run --env-file .env -d -p 8001:8001 --name new_app_container $IMAGE_URI:latest
      EOF
    env:
      REPO_NAME: ${{ env.REPO_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ENV_FILE: ${{ secrets.ENV_FILE }}  # Assuming the .env content is stored in ENV_FILE secret


approch 3 - store in github secretes 

deploy:
  runs-on: ubuntu-latest
  needs: build

  steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Setup SSH Key
    run: |
      echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
      chmod 600 ec2_key.pem

  - name: Deploy to EC2
    run: |
      IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}
      ssh -o StrictHostKeyChecking=no -i "ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
        # Pull the latest Docker image
        docker pull $IMAGE_URI:latest

        # Stop and remove any existing container
        docker stop new_app_container || true
        docker rm new_app_container || true

        # Run the Docker container with environment variables
        docker run -d -p 8001:8001 --name new_app_container \
          --env ENV_VAR1=${{ secrets.ENV_VAR1 }} \
          --env ENV_VAR2=${{ secrets.ENV_VAR2 }} \
          $IMAGE_URI:latest
      EOF
    env:
      REPO_NAME: ${{ env.REPO_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}




this is with 2nd approch 

With the first approach, where you store the `.env` file content as a GitHub secret and then use it in your deployment process, here's a detailed guide on how to set this up:

### 1. **Store `.env` Content as GitHub Secrets**

1. **Convert Your `.env` File:**
   - Combine all the lines from your `.env` file into a single string. For example:
     ```
     DB_HOST=localhost
     DB_USER=user
     DB_PASSWORD=password
     ```

2. **Add `.env` Content to GitHub Secrets:**
   - Go to your GitHub repository on GitHub.com.
   - Navigate to **Settings** > **Secrets and variables** > **Actions**.
   - Click on **New repository secret**.
   - Name the secret `ENV_FILE` (or another name of your choice).
   - Paste the entire content of your `.env` file into the value field.
   - Click **Add secret**.

### 2. **Update Your GitHub Actions Workflow**

Modify your GitHub Actions workflow to use this secret and write it to a file on your EC2 instance during deployment.

Here's an updated version of your `deploy` job that incorporates the `.env` file:

```yaml
deploy:
  runs-on: ubuntu-latest
  needs: build

  steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Setup SSH Key
    run: |
      echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
      chmod 600 ec2_key.pem

  - name: Deploy to EC2
    run: |
      IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}
      ssh -o StrictHostKeyChecking=no -i "ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
        # Create .env file on EC2 instance
        echo "${{ secrets.ENV_FILE }}" | base64 -d > .env
        
        # Pull the latest Docker image
        docker pull $IMAGE_URI:latest

        # Stop and remove any existing container
        docker stop new_app_container || true
        docker rm new_app_container || true

        # Run the Docker container with the .env file
        docker run --env-file .env -d -p 8001:8001 --name new_app_container $IMAGE_URI:latest
      EOF
    env:
      REPO_NAME: ${{ env.REPO_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ENV_FILE: ${{ secrets.ENV_FILE }}  # Reference to the GitHub secret containing the .env content
```

### 3. **Explanation:**

- **`echo "${{ secrets.ENV_FILE }}" | base64 -d > .env`**: This command decodes the base64-encoded `.env` content stored in the GitHub secret and writes it to a file on the EC2 instance. The reason for using base64 encoding is to handle any special characters or newlines in a safe manner.
  
- **`docker run --env-file .env -d -p 8001:8001 --name new_app_container $IMAGE_URI:latest`**: This command runs your Docker container with the environment variables loaded from the `.env` file.

### 4. **Best Practices:**

- **Security:** Ensure your `.env` file content does not contain sensitive information like plaintext passwords or API keys. Use secrets management tools for handling sensitive data.
  
- **Testing:** Before deploying to production, test the deployment process in a staging environment to ensure the `.env` file is correctly applied.

By following these steps, you can securely handle your `.env` file and integrate it into your deployment pipeline using GitHub Actions.